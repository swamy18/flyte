name: CI Pipeline

on:
  push:
    branches: [ master, main ]
  pull_request:
    branches: [ master, main ]
  workflow_dispatch:

permissions:
  contents: read
  packages: write
  security-events: write
  checks: write

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  DOCKERFILE_PATH: ./Dockerfile
  NODE_VERSION: '18'

jobs:
  setup:
    name: Setup and Validate
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Cache Python deps
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          if [ -f package-lock.json ]; then npm ci; elif [ -f package.json ]; then npm i; fi

      - name: Lint (ESLint)
        if: exists('package.json')
        run: |
          if npm run | grep -q "lint"; then npm run lint --if-present; else echo "No lint script"; fi

      - name: Lint (Flake8)
        run: |
          if python -c "import sys; import pkgutil; sys.exit(0)" 2>/dev/null; then pip install flake8 || true; fi
          if command -v flake8 >/dev/null 2>&1; then flake8 . || true; fi

  unit_tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Run unit tests (Node)
        if: exists('package.json')
        run: |
          npm test --if-present --silent || echo "Node unit tests failed" && exit 1

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Run unit tests (Pytest)
        run: |
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          if python - <<'PY'
import sys
try:
  import pytest  # noqa
  sys.exit(0)
except Exception:
  sys.exit(1)
PY
          then pip install pytest; fi
          if command -v pytest >/dev/null 2>&1; then pytest -q --maxfail=1 --disable-warnings || exit 1; fi

  build_docker:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: [unit_tests]
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ${{ env.DOCKERFILE_PATH }}
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache
          cache-to: type=inline

  security_scan:
    name: Security Scan (Trivy)
    runs-on: ubuntu-latest
    needs: build_docker
    steps:
      - name: Install Trivy
        uses: aquasecurity/trivy-action@0.24.0
        with:
          scan-type: 'image'
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          format: 'sarif'
          output: 'trivy-results.sarif'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH,MEDIUM'

      - name: Upload Trivy SARIF to code scanning
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-results.sarif

  integration_tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [build_docker]
    services:
      registry:
        image: registry:2
        ports:
          - 5000:5000
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Start dependencies with Docker Compose
        if: hashFiles('docker-compose*.yml') != ''
        run: |
          docker compose -f docker-compose.yml up -d --build

      - name: Wait for services
        run: |
          timeout 120 bash -c 'until curl -sf http://localhost:8080/health || curl -sf http://localhost:3000/health; do echo waiting; sleep 5; done'

      - name: Run integration tests
        run: |
          if command -v pytest >/dev/null 2>&1; then pytest -q -m integration || exit 1; fi
          if [ -f package.json ]; then npx --yes mocha || true; fi

      - name: Tear down
        if: always()
        run: |
          if [ -f docker-compose.yml ]; then docker compose -f docker-compose.yml down -v; fi

  deploy_staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [security_scan, integration_tests]
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main'
    environment:
      name: staging
      url: ${{ steps.deploy.outputs.url }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure cloud credentials
        if: env.CLOUD_PROVIDER == 'aws'
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Kubeconfig from secret
        if: secrets.KUBECONFIG_BASE64 != ''
        run: |
          echo "$KUBECONFIG_BASE64" | base64 -d > kubeconfig
          echo "KUBECONFIG=$GITHUB_WORKSPACE/kubeconfig" >> $GITHUB_ENV
        env:
          KUBECONFIG_BASE64: ${{ secrets.KUBECONFIG_BASE64 }}

      - name: Deploy
        id: deploy
        run: |
          if [ -f helm/Chart.yaml ]; then 
            helm upgrade --install flyte ./helm --namespace flyte --create-namespace --wait --timeout 5m
            echo "url=https://staging.example.com" >> $GITHUB_OUTPUT
          elif [ -f k8s/deployment.yaml ]; then
            kubectl apply -f k8s/
            echo "url=https://staging.example.com" >> $GITHUB_OUTPUT
          else
            echo "No deployment manifests found" && exit 1
          fi

  notify:
    name: Notify
    runs-on: ubuntu-latest
    needs: [deploy_staging]
    if: always()
    steps:
      - name: Notify on failure
        if: needs.deploy_staging.result == 'failure' || failure()
        uses: slackapi/slack-github-action@v1.27.0
        with:
          payload: |
            {
              "text": "CI Pipeline failed for ${{ github.repository }} at ${{ github.sha }}"
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK

      - name: Notify on success
        if: needs.deploy_staging.result == 'success' && success()
        uses: slackapi/slack-github-action@v1.27.0
        with:
          payload: |
            {
              "text": "CI Pipeline succeeded for ${{ github.repository }} at ${{ github.sha }}"
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
